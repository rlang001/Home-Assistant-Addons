# MQTT stuff
## MQTT server info
mqtt:
  # MQTT Host.  Default: 127.0.0.1
  host: 127.0.0.1

  # MQTT Port.  Default: 1883
  port: 1883

  # MQTT Server Username
  user: user

  # MQTT Server password
  password: password

  # Retain flag. use the MQTT retain flag to make the configuration topics
  # persistent. The script will only need to be run when things change or if
  # the MQTT server loses its retained messages.  Default: 0
  retain: 1

  # The default device_topic_suffix is the same topic structure
  # as set by default in rtl433 config: Default: devices[/type][/model][/subtype]/id[id]
  device_topic_suffix: devices[/type][/model][/subtype]/id[id]

discovery:
  # rtl_433 MQTT event topic to subscribe to. Dwefault: rtl_433/+/events
  rtl_topic: rtl_433/+/events

  # Home Assistant MQTT topic prefix.  Default: homeassistant
  discovery_prefix: homeassistant

  # Append 'force_update = true' to all configs.
  force_update: false

  # Interval to republish config topics in seconds.  Default: 600
  discovery_interval: 600

  # Number of seconds with no updates after which the sensor becomes unavailable
  expire_after:

  # ID's of devices that will be discovered (omit for all)"
  # Default: empty
  # Example:
  # ids:
  #    - 32
  #    - 455

  ids:

# Fields that get ignored when publishing to Home Assistant
# (reduces noise to help spot missing field mappings)
# If the field is to be published, it must have an entry in mappings
# defaults:
#  - type
#  - model
#  - subtype
#  - channel
#  - id
#  - mic
#  - mod
#  - freq
#  - sequence_num
#  - message_type
#  - exception
#  - raw_msg

skip_keys:
  - type
  - model
  - subtype
  - channel
  - id
  - mic
  - mod
  - freq
  - sequence_num
  - message_type
  - exception
  - raw_msg

#
# Sensor mappings
# Templates to publish sensor data

mappings:
  freq:
    device_type: sensor
    object_suffix: freq
    config:
      device_class: frequency
      name: Frequency
      unit_of_measurement: Hz
      value_template: "{{ value|float|round(4) }}"
      state_class: measurement
      entity_category: diagnostic

  freq1:
    device_type: sensor
    object_suffix: freq1
    config:
      device_class: frequency
      name: Frequency
      unit_of_measurement: MHz
      value_template: "{{ value|float|round(2) }}"
      state_class: measurement
      entity_category: diagnostic

  freq2:
    device_type: sensor
    object_suffix: freq2
    config:
      device_class: frequency
      name: Frequency
      unit_of_measurement: MHz
      value_template: "{{ value|float|round(2) }}"
      state_class: measurement
      entity_category: diagnostic

  temperature_C:
    device_type: sensor
    object_suffix: T
    config:
      device_class: temperature
      name: Temperature
      unit_of_measurement: °C
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  temperature_1_C:
    device_type: sensor
    object_suffix: T1
    config:
      device_class: temperature
      name: Temperature 1
      unit_of_measurement: °C
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  temperature_2_C:
    device_type: sensor
    object_suffix: T2
    config:
      device_class: temperature
      name: Temperature 2
      unit_of_measurement: °C
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  temperature_3_C:
    device_type: sensor
    object_suffix: T3
    config:
      device_class: temperature
      name: Temperature 3
      unit_of_measurement: °C
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  temperature_4_C:
    device_type: sensor
    object_suffix: T4
    config:
      device_class: temperature
      name: Temperature 4
      unit_of_measurement: °C
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  temperature_F:
    device_type: sensor
    object_suffix: F
    config:
      device_class: temperature
      name: Temperature
      unit_of_measurement: °F
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  # This diagnostic sensor is useful to see when a device last sent a value,
  # even if the value didn't change.
  # https://community.home-assistant.io/t/send-metrics-to-influxdb-at-regular-intervals/9096
  # https://github.com/home-assistant/frontend/discussions/13687
  time:
    device_type: sensor
    object_suffix: UTC
    config:
      device_class: timestamp
      name: Timestamp
      entity_category: diagnostic
      enabled_by_default: "False"
      icon: "mdi:clock-in"

  battery_ok:
    device_type: sensor
    object_suffix: B
    config:
      device_class: battery
      name: Battery
      unit_of_measurement: "%"
      value_template: "{{ ((float(value) * 99)|round(0)) + 1 }}"
      state_class: measurement
      entity_category: diagnostic

  battery_mV:
    device_type: sensor
    object_suffix: mV
    config:
      device_class: voltage
      name: Battery mV
      unit_of_measurement: mV
      value_template: "{{ float(value) }}"
      state_class: measurement
      entity_category: diagnostic

  supercap_V:
    device_type: sensor
    object_suffix: V
    config:
      device_class: voltage
      name: Supercap V
      unit_of_measurement: V
      value_template: "{{ float(value) }}"
      state_class: measurement
      entity_category: diagnostic

  humidity:
    device_type: sensor
    object_suffix: H
    config:
      device_class: humidity
      name: Humidity
      unit_of_measurement: "%"
      value_template: "{{ value|float }}"
      state_class: measurement

  humidity_1:
    device_type: sensor
    object_suffix: H1
    config:
      device_class: humidity
      name: Humidity 1
      unit_of_measurement: "%"
      value_template: "{{ value|float }}"
      state_class: measurement

  humidity_2:
    device_type: sensor
    object_suffix: H2
    config:
      device_class: humidity
      name: Humidity 2
      unit_of_measurement: "%"
      value_template: "{{ value|float }}"
      state_class: measurement

  moisture:
    device_type: sensor
    object_suffix: M
    config:
      device_class: moisture
      name: Moisture
      unit_of_measurement: "%"
      value_template: "{{ value|float }}"
      state_class: measurement

  detect_wet:
    device_type: binary_sensor
    object_suffix: moisture
    config:
      name: Water Sensor
      device_class: moisture
      force_update: "true"
      payload_on: "1"
      payload_off: "0"

  pressure_hPa:
    device_type: sensor
    object_suffix: P
    config:
      device_class: pressure
      name: Pressure
      unit_of_measurement: hPa
      value_template: "{{ value|float }}"
      state_class: measurement

  pressure_kPa:
    device_type: sensor
    object_suffix: P
    config:
      device_class: pressure
      name: Pressure
      unit_of_measurement: kPa
      value_template: "{{ value|float }}"
      state_class: measurement

  wind_speed_km_h:
    device_type: sensor
    object_suffix: WS
    config:
      device_class: wind_speed
      name: Wind Speed
      unit_of_measurement: km/h
      value_template: "{{ value|float }}"
      state_class: measurement

  wind_avg_km_h:
    device_type: sensor
    object_suffix: WS
    config:
      device_class: wind_speed
      name: Wind Speed
      unit_of_measurement: km/h
      value_template: "{{ value|float }}"
      state_class: measurement

  wind_avg_mi_h:
    device_type: sensor
    object_suffix: WS
    config:
      device_class: wind_speed
      name: Wind Speed
      unit_of_measurement: mi/h
      value_template: "{{ value|float }}"
      state_class: measurement

  wind_avg_m_s:
    device_type: sensor
    object_suffix: WS
    config:
      device_class: wind_speed
      name: Wind Average
      unit_of_measurement: km/h
      value_template: "{{ (float(value|float) * 3.6) | round(2) }}"
      state_class: measurement

  wind_speed_m_s:
    device_type: sensor
    object_suffix: WS
    config:
      device_class: wind_speed
      name: Wind Speed
      unit_of_measurement: km/h
      value_template: "{{ float(value|float) * 3.6 }}"
      state_class: measurement

  gust_speed_km_h:
    device_type: sensor
    object_suffix: GS
    config:
      device_class: wind_speed
      name: Gust Speed
      unit_of_measurement: km/h
      value_template: "{{ value|float }}"
      state_class: measurement

  wind_max_km_h:
    device_type: sensor
    object_suffix: GS
    config:
      device_class: wind_speed
      name: Wind max speed
      unit_of_measurement: km/h
      value_template: "{{ value|float }}"
      state_class: measurement

  wind_max_m_s:
    device_type: sensor
    object_suffix: GS
    config:
      device_class: wind_speed
      name: Wind max
      unit_of_measurement: km/h
      value_template: "{{ (float(value|float) * 3.6) | round(2) }}"
      state_class: measurement

  gust_speed_m_s:
    device_type: sensor
    object_suffix: GS
    config:
      device_class: wind_speed
      name: Gust Speed
      unit_of_measurement: km/h
      value_template: "{{ float(value|float) * 3.6 }}"
      state_class: measurement

  wind_dir_deg:
    device_type: sensor
    object_suffix: WD
    config:
      name: Wind Direction
      unit_of_measurement: °
      value_template: "{{ value|float }}"
      state_class: measurement

  rain_mm:
    device_type: sensor
    object_suffix: RT
    config:
      device_class: precipitation
      name: Rain Total
      unit_of_measurement: mm
      value_template: "{{ value|float|round(2) }}"
      state_class: total_increasing

  rain_rate_mm_h:
    device_type: sensor
    object_suffix: RR
    config:
      device_class: precipitation_intensity
      name: Rain Rate
      unit_of_measurement: mm/h
      value_template: "{{ value|float }}"
      state_class: measurement

  rain_in:
    device_type: sensor
    object_suffix: RT
    config:
      device_class: precipitation
      name: Rain Total
      unit_of_measurement: in
      value_template: "{{ value|float|round(2) }}"
      state_class: total_increasing

  rain_rate_in_h:
    device_type: sensor
    object_suffix: RR
    config:
      device_class: precipitation_intensity
      name: Rain Rate
      unit_of_measurement: in/h
      value_template: "{{ value|float|round(2) }}"
      state_class: measurement

  reed_open:
    device_type: binary_sensor
    object_suffix: reed_open
    config:
      device_class: safety
      force_update: "true"
      payload_on: "1"
      payload_off: "0"
      entity_category: diagnostic

  contact_open:
    device_type: binary_sensor
    object_suffix: contact_open
    config:
      device_class: safety
      force_update: "true"
      payload_on: "1"
      payload_off: "0"
      entity_category: diagnostic

  tamper:
    device_type: binary_sensor
    object_suffix: tamper
    config:
      device_class: safety
      force_update: "true"
      payload_on: "1"
      payload_off: "0"
      entity_category: diagnostic

  alarm:
    device_type: binary_sensor
    object_suffix: alarm
    config:
      device_class: safety
      force_update: "true"
      payload_on: "1"
      payload_off: "0"
      entity_category: diagnostic

  rssi:
    device_type: sensor
    object_suffix: rssi
    config:
      device_class: signal_strength
      unit_of_measurement: dB
      name: RSSI
      value_template: "{{ value|float|round(2) }}"
      state_class: measurement
      entity_category: diagnostic

  snr:
    device_type: sensor
    object_suffix: snr
    config:
      device_class: signal_strength
      unit_of_measurement: dB
      name: SNR
      value_template: "{{ value|float|round(2) }}"
      state_class: measurement
      entity_category: diagnostic

  noise:
    device_type: sensor
    object_suffix: noise
    config:
      device_class: signal_strength
      unit_of_measurement: dB
      name: Noise
      value_template: "{{ value|float|round(2) }}"
      state_class: measurement
      entity_category: diagnostic

  depth_cm:
    device_type: sensor
    object_suffix: D
    config:
      name: Depth
      unit_of_measurement: cm
      value_template: "{{ value|float }}"
      state_class: measurement

  power_W:
    device_type: sensor
    object_suffix: watts
    config:
      device_class: power
      name: Power
      unit_of_measurement: W
      value_template: "{{ value|float }}"
      state_class: measurement

  energy_kWh:
    device_type: sensor
    object_suffix: kwh
    config:
      device_class: energy
      name: Energy
      unit_of_measurement: kWh
      value_template: "{{ value|float }}"
      state_class: measurement

  current_A:
    device_type: sensor
    object_suffix: A
    config:
      device_class: current
      name: Current
      unit_of_measurement: A
      value_template: "{{ value|float }}"
      state_class: measurement

  voltage_V:
    device_type: sensor
    object_suffix: V
    config:
      device_class: voltage
      name: Voltage
      unit_of_measurement: V
      value_template: "{{ value|float }}"
      state_class: measurement

  light_lux:
    device_type: sensor
    object_suffix: lux
    config:
      device_class: illuminance
      name: Outside Luminance
      unit_of_measurement: lx
      value_template: "{{ value|int }}"
      state_class: measurement

  lux:
    device_type: sensor
    object_suffix: lux
    config:
      device_class: illuminance
      name: Outside Luminance
      unit_of_measurement: lx
      value_template: "{{ value|int }}"
      state_class: measurement

  uv:
    device_type: sensor
    object_suffix: uv
    config:
      name: UV Index
      unit_of_measurement: UV Index
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  uvi:
    device_type: sensor
    object_suffix: uvi
    config:
      name: UV Index
      unit_of_measurement: UV Index
      value_template: "{{ value|float|round(1) }}"
      state_class: measurement

  storm_dist_km:
    device_type: sensor
    object_suffix: stdist
    config:
      name: Lightning Distance
      unit_of_measurement: km
      value_template: "{{ value|int }}"
      state_class: measurement

  storm_dist:
    device_type: sensor
    object_suffix: stdist
    config:
      name: Lightning Distance
      unit_of_measurement: mi
      value_template: "{{ value|int }}"
      state_class: measurement

  strike_distance:
    device_type: sensor
    object_suffix: stdist
    config:
      name: Lightning Distance
      unit_of_measurement: mi
      value_template: "{{ value|int }}"
      state_class: measurement

  strike_count:
    device_type: sensor
    object_suffix: strcnt
    config:
      name: Lightning Strike Count
      value_template: "{{ value|int }}"
      state_class: total_increasing

  consumption_data:
    device_type: sensor
    object_suffix: consumption
    config:
      name: Consumption
      value_template: "{{ value|int }}"
      state_class: total_increasing

  consumption:
    device_type: sensor
    object_suffix: consumption
    config:
      name: Consumption
      value_template: "{{ value|int }}"
      state_class: total_increasing

  # Added 7/9/2025 - RAL
  leak:
    device_type: sensor
    object_suffix: leak
    config:
      name: Leak
      value_template: "{{ value|int }}"
      state_class: measurement

  # Added 7/9/2025 - RAL
  leaknow:
    device_type: sensor
    object_suffix: leaknow
    config:
      name: LeakNow
      value_template: "{{ value|int }}"
      state_class: measurement

  # Added 7/9/2025 - RAL
  backflow:
    device_type: sensor
    object_suffix: backflow
    config:
      name: Backflow
      value_template: "{{ value|int }}"
      state_class: measurement

  # Added 7/9/2025 - RAL
  nouse:
    device_type: sensor
    object_suffix: nouse
    config:
      name: No Use
      value_template: "{{ value|int }}"
      state_class: measurement

  channel:
    device_type: device_automation
    object_suffix: CH
    config:
      automation_type: trigger
      type: button_short_release
      subtype: button_1

  button:
    device_type: device_automation
    object_suffix: BTN
    config:
      automation_type: trigger
      type: button_short_release
      subtype: button_2

  # WH45, WH290
  pm2_5_ug_m3:
    device_type: sensor
    object_suffix: PM25
    config:
      device_class: pm25
      name: PM 2.5 Concentration
      unit_of_measurement: µg/m³
      value_template: "{{ value|float }}"
      state_class: measurement

  # WH45
  pm10_ug_m3:
    device_type: sensor
    object_suffix: PM10
    config:
      device_class: pm10
      name: PM 10 Concentration
      unit_of_measurement: µg/m³
      value_template: "{{ value|float }}"
      state_class: measurement

  # WH290
  estimated_pm10_0_ug_m3:
    device_type: sensor
    object_suffix: PM10
    config:
      device_class: pm10
      name: Estimated PM 10 Concentration
      unit_of_measurement: µg/m³
      value_template: "{{ value|float }}"
      state_class: measurement

  # WH45
  co2_ppm:
    device_type: sensor
    object_suffix: CO2
    config:
      device_class: carbon_dioxide
      name: CO2 Concentration
      unit_of_measurement: ppm
      value_template: "{{ value|int }}"
      state_class: measurement

  ext_power:
    device_type: binary_sensor
    object_suffix: extpwr
    config:
      device_class: power
      name: External Power
      payload_on: "1"
      payload_off: "0"
      entity_category: diagnostic
